1] Bubble Sort ->(largest element at end)
code link : https://onecompiler.com/java/42t2rvfmw

if arr[i] > arr[i+1] swap them. 
To place the element in their respective position , we have to do the following operation n-1 then.

import java.util.*;

public class Main {
  
  //for printing an array
  public static void PrintArr(int arr[]) {
   for(int i=0; i<arr.length; i++) {
     System.out.print(arr[i] + " ");
   }    
   System.out.println();
  }

    public static void main(String[] args) {     
     Scanner sc = new Scanner(System.in);
     int n = sc.nextInt();
     //initalization of an array 
     int arr[] = new int[n];
     
     //input of an array 
     for(int i=0; i<n;i++) {
       arr[i] = sc.nextInt();
     }
     
     //logic of bubble sort 
     for(int i=0; i<n-1; i++) {
       //inner loop 
       for(int j=0; j<n-i-1; j++) {
         if(arr[j] > arr[j+1]) {
           //swaping 
           int temp = arr[j];
           arr[j] = arr[j+1];
           arr[j+1] = temp;
         }
       
       }
     }
    PrintArr(arr);
     
  }
}


//Algorithm : BubbleSort(arr[],temp,n) 
step 1 : Start
step 2 : input an array 
step 3 : initialization i=1
step 4 : repeat step 5 to step 7 until i < n
step 5 : set j = 1
step 6 : repeat step 7 until j<n-i
step 7 : if arr[j] > arr[j+1] then do swaping 
          temp = arr[j]
          arr[j] = arr[j+1]
          arr[j+1] = temp
step 8 : call PrintArr(arr) function
step 9 : stop

//Algorithm : PrintArr(arr)
step 1 : start
step 2 : initalization i = 1 to n 
step 3 : return arr[];


2] //SELECTION SORT ---smallest at starting index
code link : https://onecompiler.com/java/42t32bmxd

IDEA : The inner loop selects the minimum elements in the unsorted array and places the elements in increasing order

Time Complexity : O(n^2)

import java.util.*;

public class Main {
  
  //creating printing function
  public static void PrintArray(int arr[]) {
    for(int i=0; i<arr.length; i++) {
      System.out.print(arr[i] + " ");
    }
    System.out.println();
  }
  
  //main function 
    public static void main(String[] args) {
     Scanner sc = new Scanner(System.in);
     int n = sc.nextInt();
     //initalization of an array 
     int arr[] = new int[n];
     
     //input of an array 
     for(int i=0;i<n;i++) {
       arr[i] = sc.nextInt();  
     }
     
     //logic of Selection sort 
     for(int i=0; i<n; i++) {
       int smallest = i;
       for(int j=i+1; j<n; j++) {
         if(arr[j] < arr[smallest]) {
           smallest = j;
         }
       }
       int temp = arr[smallest];
       arr[smallest] = arr[i];
       arr[i] = temp;
     }
     
     //calling printing function 
     PrintArray(arr);
   }
}

//Algorithm : SelectionSort(int arr[],n,temp,smallest)
step 1 : start
step 2 : input of an array 
step 3 : initialization i = 1
step 4 : repeat step 5 to step 8 until i<n
step 5 : set smallest = i
step 6 : set j=i+1 and repeat step 7 until j<n
step 7 : check arr[j] < arr[smallest] then smallest = j
step 8 : //swaping 
          set temp = arr[smallest]
          arr[smallest] = arr[i]
          arr[i] = temp
step 9 : call PrintArray(arr) function 
step 10 : stop

//Algorithm : PrintArray(int arr[],n)
step 1 : start
step 2 : initialization i = 1 till i<n 
step 3 : return arr[i];


3] //INSERTION SORT 
code link : https://onecompiler.com/java/42t354jjy
IDEA : Take an element from the unsorted array , place it in its corresponding position in the sorted part
       and shift the elements accordingly

Time Complexity : O(n^2);

import java.util.*;

public class Main {
   
   //printing function 
   public static void PrintArr(int arr[]) {
     for(int i=0; i<arr.length; i++) {
       System.out.print(arr[i] + " ");
     }
     System.out.println();
   }
   
    public static void main(String[] args) {
      Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      
      //initialization of an array 
      int arr[] = new int[n];
      
      //input of an array 
      for(int i=0; i<n; i++) {
        arr[i] = sc.nextInt();
      }
      
      //logic of insertion sort 
      for(int i=0; i<n; i++) {
        int current = arr[i];
        int j = i-1;
        while(j>=0 && arr[j] > current) {
          //swapping 
          arr[j+1] = arr[j];
          j--;
        }
        arr[j+1] = current;
      }
      PrintArr(arr);
  }
}
